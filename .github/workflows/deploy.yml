name: Deploy to VM

on:
  workflow_dispatch:
    inputs:
      backend_ref:
        description: "Backend tag (e.g., sha-abc123 or latest)"
        required: true
        default: "latest"
      frontend_ref:
        description: "Frontend tag"
        required: true
        default: "latest"
  # (Optional) auto after build success on main:
  workflow_run:
    workflows: ["Build & Push Images"]
    types: [completed]

permissions:
  contents: read

env:
  DEPLOY_DIR: ${{ secrets.DEPLOY_PATH || '/home/azureuser/app' }}
  BACKEND_IMAGE: belokonenkons/devopsdemo-backend
  FRONTEND_IMAGE: belokonenkons/devopsdemo-frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success')
    steps:
      - uses: actions/checkout@v4

      - name: Select tags
        id: tags
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "backend_tag=${{ github.event.inputs.backend_ref }}" >> $GITHUB_OUTPUT
            echo "frontend_tag=${{ github.event.inputs.frontend_ref }}" >> $GITHUB_OUTPUT
          else
            # Derive from last commit SHA (short)
            SHA_TAG=sha-$(echo "${GITHUB_SHA}" | cut -c1-7)
            echo "backend_tag=$SHA_TAG" >> $GITHUB_OUTPUT
            echo "frontend_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Debug list
        run: |
          pwd
          ls -al
          echo "---- compose ----"
          ls -al compose || echo "no compose dir"
          echo "---- scripts ----"
          ls -al scripts || echo "no scripts dir"

      - name: Check remote path
        uses: appleboy/ssh-action@v1.0.3
        env:
          DEPLOY_DIR: ${{ vars.DEPLOY_PATH }}
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          envs: DEPLOY_DIR
          script: |
            set -euxo pipefail
            echo "Trying path: $DEPLOY_DIR"
            ls -ld "$DEPLOY_DIR" || echo "will create"
            ls -ld "$(dirname "$DEPLOY_DIR")"

      - name: Prepare remote dir
        uses: appleboy/ssh-action@v1.0.3
        env:
          DEPLOY_DIR: ${{ vars.DEPLOY_PATH }}
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          envs: DEPLOY_DIR
          script: |
            set -eux
            mkdir -p "$DEPLOY_DIR/compose" "$DEPLOY_DIR/scripts"
            ls -ld "$DEPLOY_DIR" "$DEPLOY_DIR/compose"

      - name: Copy compose & scripts
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: compose, scripts
          target: ${{ vars.DEPLOY_PATH }}
          debug: true

      - name: Verify remote files
        uses: appleboy/ssh-action@v1.0.3
        env:
          DEPLOY_DIR: ${{ vars.DEPLOY_PATH }}
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          envs: DEPLOY_DIR
          script: |
            set -eux
            ls -R "$DEPLOY_DIR/compose"
            ls -R "$DEPLOY_DIR/scripts"

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.0.3
        env:
          BACKEND_TAG: ${{ steps.tags.outputs.backend_tag }}
          FRONTEND_TAG: ${{ steps.tags.outputs.frontend_tag }}
          DEPLOY_DIR: ${{ vars.DEPLOY_PATH }}
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          envs: BACKEND_TAG,FRONTEND_TAG,DEPLOY_DIR
          script: |
            set -euo pipefail

            : "${BACKEND_TAG:?BACKEND_TAG is required but not set}"
            : "${FRONTEND_TAG:?FRONTEND_TAG is required but not set}"
            : "${DEPLOY_DIR:?DEPLOY_DIR is required but not set}"

            cd "$DEPLOY_DIR/compose"
            echo "Deploying backend=${BACKEND_TAG} frontend=${FRONTEND_TAG}"

            # Create .env for compose
            cat > .env <<EOF
            BACKEND_TAG=${BACKEND_TAG}
            FRONTEND_TAG=${FRONTEND_TAG}
            EOF

            # Pull new images
            docker compose -f docker-compose.base.yml -f docker-compose.prod.yml pull

            # Start/Update services
            docker compose -f docker-compose.base.yml -f docker-compose.prod.yml up -d --remove-orphans

            # Basic health check loop (backend)
            echo "Verifying backend health..."
            for i in {1..10}; do
              if docker exec devops-backend wget -q -O /dev/null http://localhost:5001/health || docker ps --filter "name=devops-backend" --format '{{.Status}}' | grep -qi 'up'; then
                echo "Backend healthy."
                break
              fi
              sleep 3
            done

            # Clean up old dangling images (safe)
            docker image prune -f --filter "until=24h"
